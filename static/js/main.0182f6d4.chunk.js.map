{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","render","side","front","back","deck","card","front2","index","answer","placeholder","history","flip","className","this","renderSwitch","renderStudy","renderDeck","renderWord","renderSelect","Button","variant","onClick","e","setState","flipCard","onSubmit","preventDefault","target","value","toLowerCase","class","type","onChange","backButton","ButtonGroup","alert","width","undefined","pop","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0182f6d4.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {render:\"select\", side:\"Front\", front:\"\", back:\"\", deck:\"\", card:[{front:\"Est-ce que ____etes prets?\", front2:\"definition: you\",back:\"vous\"}, {front:\"il ____que j'y aille\", front2: \"definition: have to\", back:\"faut\"}, {front:\"il est ____et sauf\", front2: \"definition: healthy\", back:\"sain\"}], index:0, answer:\"\", placeholder:\"Answer\", history:[], flip:true} \n    }\n    \n    render() {\n        return <div className=\"App\"><header className=\"App-header\">\n        {this.renderSwitch()}\n        </header></div>    \n    }\n    \n    renderSwitch() {\n        switch(this.state.render) {\n            case \"study\": return this.renderStudy()\n            case \"deck\": return this.renderDeck()       \n            case \"word\": return this.renderWord()         \n            case \"select\": return this.renderSelect()    \n            default: return <p>error</p>\n        }    \n    }\n\n    renderStudy() { return <> <div className=\"StudyCard\">\n        <Button variant=\"dark\" onClick={(e) => this.setState({flip:!this.state.flip})}>Flip Card?</Button>\n        {this.flipCard()}\n        <form onSubmit=\n                        {(e) => { e.preventDefault(); if(e.target[0].value.toLowerCase() == this.state.card[this.state.index].back.toLowerCase()) \n                                {this.setState({index:(this.state.index+1)%3, answer:\"\", placeholder:\"Answer\", flip:true})} \n                                else { this.setState({answer:\"\", placeholder:\"Incorrect\"}) } } }>\n                <input class=\"inputfield\" type=\"text\" value={this.state.answer} onChange={(e) => this.setState({answer:e.target.value})} placeholder={this.state.placeholder} />\n                 </form> </div>\n       <p /><p /><p /><p /><p /><Button onClick={() => this.setState({render: \"word\", history:[...this.state.history, \"study\"]})}>Add more cards to deck</Button>\n    <p /> <Button onClick={() => this.setState({render:\"select\", history:[...this.state.history, \"study\"]})}>Study another deck</Button>\n    <p /><p />{this.backButton()}\n    </>\n    }\n\n    renderDeck() { return <>\n        <p>Make a new Deck</p>\n        <h3>Enter the title of your Deck</h3>\n        <form onSubmit={(e) => { e.preventDefault(); if(e.target[0].value===\"\") {} else this.setState({render: \"word\", history:[...this.state.history, \"deck\"]}) }} >\n                <input onChange={(e) => { e.preventDefault(); this.setState({deck:e.target.value}) }} type=\"text\" placeholder=\"French, Spanish, etc...\" />\n        </form>\n        <p /><p />{this.backButton()}\n        </>    \n    }\n\n    renderWord() { return  <>\n        <p>Add a Card to {this.state.deck}</p>\n        <div className=\"StudyCard\">\n        <ButtonGroup>\n        <Button variant={this.state.side==\"Front\"? \"dark\" : \"light\"} onClick={() => this.setState({side: \"Front\"})}>Front</Button>\n        <Button variant={this.state.side==\"Back\"? \"dark\" : \"light\"} onClick={() => this.setState({side: \"Back\"})}>Back</Button></ButtonGroup>\n        <form onSubmit={(e) => {e.preventDefault(); \n                                if(this.state.side==\"Front\") { this.setState({side:\"Back\"})}\n                                else { if(this.state.front==\"\"||this.state.back==\"\") {this.setState({side:\"Front\"})} else { this.setState({side:\"Front\", front:\"\", back:\"\"}); alert(\"pretend the card has been added to the selected deck; actually adding the card is not implemented yet\")}}} }\n        width=\"300px\">\n                <input class=\"inputfield\" type=\"text\" value={this.state.side ==\"Front\"? this.state.front : this.state.back }\n                                   onChange={(e) => { e.preventDefault();\n                                                     if(this.state.side==\"Front\") {this.setState({front:e.target.value})} \n                                                    else {this.setState({back:e.target.value})} }}\n                placeholder={this.state.side + \" of Card\"} />\n        </form><p/></div>\n        <p /><p />\n        <div> <Button onClick={() => this.setState({render: \"select\", history:[...this.state.history, \"word\"]})}>Study another Topic</Button><p></p><Button onClick={() => { this.setState({render: \"study\", history:[...this.state.history, \"word\"]}); alert(\"The only available deck is french. Pretend as though these were the cards you entered.\")}}>Study this Deck</Button><p />\n              <Button onClick={() => this.setState({render: \"deck\", history:[...this.state.history, \"word\"]})}>Make another Deck</Button> </div>\n        <p /><p />{this.backButton()}\n        </>\n    }\n\n    renderSelect(){ \n        return <>\n               <p>Choose the Subject</p>\n               <div class=\"scroll\">\n               <Button onClick={() => this.setState({render: \"study\", history:[...this.state.history, \"select\"], deck:\"French\"})}>French</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Spanish</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Italian</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>German</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Latin</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Java</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Japanese</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Javanese</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Lorem</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Ipsum</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Virology</Button><p />\n               <Button onClick={()=> alert(\"Currently, the only example deck is French.\")}>Topic</Button><p />\n               </div> \n                <p />\n               <form onSubmit={(e) => alert(\"The list of decks is filtered by the search term, case-independant\")} >\n                <input type=\"text\" placeholder=\"Search\" />\n                 </form>\n                <p />\n               <Button onClick={() => this.setState({render:\"deck\", history:[...this.state.history, \"select\"]})}>Make a new deck</Button>\n               <p /><p />{this.backButton()}\n               </>\n    }\n    \n    backButton() {\n        if(this.state.history[0]===undefined) { return <p></p> }\n        else{ return <Button onClick={() => this.setState({render:this.state.history.pop()})}>Back</Button>}\n    }\n\n    flipCard() {\n        if (this.state.flip) { return <><p> {this.state.card[this.state.index].front} </p> <p> {this.state.card[this.state.index].front2} </p></>} \n        else { return <p> {this.state.card[this.state.index].back} </p>}\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}